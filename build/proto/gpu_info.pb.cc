// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gpu_info.proto

#include "gpu_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace monitor {
namespace proto {
class GpuInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GpuInfo> _instance;
} _GpuInfo_default_instance_;
}  // namespace proto
}  // namespace monitor
static void InitDefaultsscc_info_GpuInfo_gpu_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::monitor::proto::_GpuInfo_default_instance_;
    new (ptr) ::monitor::proto::GpuInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GpuInfo_gpu_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GpuInfo_gpu_5finfo_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gpu_5finfo_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_gpu_5finfo_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gpu_5finfo_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_gpu_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::monitor::proto::GpuInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::monitor::proto::GpuInfo, id_),
  PROTOBUF_FIELD_OFFSET(::monitor::proto::GpuInfo, gpu_name_),
  PROTOBUF_FIELD_OFFSET(::monitor::proto::GpuInfo, gpu_mem_total_),
  PROTOBUF_FIELD_OFFSET(::monitor::proto::GpuInfo, gpu_mem_free_),
  PROTOBUF_FIELD_OFFSET(::monitor::proto::GpuInfo, gpu_mem_used_),
  PROTOBUF_FIELD_OFFSET(::monitor::proto::GpuInfo, gpu_mem_utilize_),
  PROTOBUF_FIELD_OFFSET(::monitor::proto::GpuInfo, gpu_utilize_),
  PROTOBUF_FIELD_OFFSET(::monitor::proto::GpuInfo, temperture_),
  PROTOBUF_FIELD_OFFSET(::monitor::proto::GpuInfo, fan_speed_),
  PROTOBUF_FIELD_OFFSET(::monitor::proto::GpuInfo, power_stat_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::monitor::proto::GpuInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::monitor::proto::_GpuInfo_default_instance_),
};

const char descriptor_table_protodef_gpu_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016gpu_info.proto\022\rmonitor.proto\"\323\001\n\007GpuI"
  "nfo\022\n\n\002id\030\n \001(\t\022\020\n\010gpu_name\030\001 \001(\t\022\025\n\rgpu"
  "_mem_total\030\002 \001(\005\022\024\n\014gpu_mem_free\030\003 \001(\005\022\024"
  "\n\014gpu_mem_used\030\004 \001(\005\022\027\n\017gpu_mem_utilize\030"
  "\005 \001(\005\022\023\n\013gpu_utilize\030\006 \001(\005\022\022\n\ntemperture"
  "\030\007 \001(\005\022\021\n\tfan_speed\030\010 \001(\005\022\022\n\npower_stat\030"
  "\t \001(\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gpu_5finfo_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_gpu_5finfo_2eproto_sccs[1] = {
  &scc_info_GpuInfo_gpu_5finfo_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gpu_5finfo_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gpu_5finfo_2eproto = {
  false, false, descriptor_table_protodef_gpu_5finfo_2eproto, "gpu_info.proto", 253,
  &descriptor_table_gpu_5finfo_2eproto_once, descriptor_table_gpu_5finfo_2eproto_sccs, descriptor_table_gpu_5finfo_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_gpu_5finfo_2eproto::offsets,
  file_level_metadata_gpu_5finfo_2eproto, 1, file_level_enum_descriptors_gpu_5finfo_2eproto, file_level_service_descriptors_gpu_5finfo_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_gpu_5finfo_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_gpu_5finfo_2eproto)), true);
namespace monitor {
namespace proto {

// ===================================================================

class GpuInfo::_Internal {
 public:
};

GpuInfo::GpuInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:monitor.proto.GpuInfo)
}
GpuInfo::GpuInfo(const GpuInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gpu_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gpu_name().empty()) {
    gpu_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gpu_name(), 
      GetArena());
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArena());
  }
  ::memcpy(&gpu_mem_total_, &from.gpu_mem_total_,
    static_cast<size_t>(reinterpret_cast<char*>(&power_stat_) -
    reinterpret_cast<char*>(&gpu_mem_total_)) + sizeof(power_stat_));
  // @@protoc_insertion_point(copy_constructor:monitor.proto.GpuInfo)
}

void GpuInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GpuInfo_gpu_5finfo_2eproto.base);
  gpu_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&gpu_mem_total_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&power_stat_) -
      reinterpret_cast<char*>(&gpu_mem_total_)) + sizeof(power_stat_));
}

GpuInfo::~GpuInfo() {
  // @@protoc_insertion_point(destructor:monitor.proto.GpuInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GpuInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gpu_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GpuInfo::ArenaDtor(void* object) {
  GpuInfo* _this = reinterpret_cast< GpuInfo* >(object);
  (void)_this;
}
void GpuInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GpuInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GpuInfo& GpuInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GpuInfo_gpu_5finfo_2eproto.base);
  return *internal_default_instance();
}


void GpuInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:monitor.proto.GpuInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gpu_name_.ClearToEmpty();
  id_.ClearToEmpty();
  ::memset(&gpu_mem_total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&power_stat_) -
      reinterpret_cast<char*>(&gpu_mem_total_)) + sizeof(power_stat_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GpuInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string gpu_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_gpu_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "monitor.proto.GpuInfo.gpu_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gpu_mem_total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gpu_mem_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gpu_mem_free = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gpu_mem_free_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gpu_mem_used = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          gpu_mem_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gpu_mem_utilize = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          gpu_mem_utilize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gpu_utilize = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          gpu_utilize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 temperture = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          temperture_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fan_speed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          fan_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 power_stat = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          power_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "monitor.proto.GpuInfo.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GpuInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:monitor.proto.GpuInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gpu_name = 1;
  if (this->gpu_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gpu_name().data(), static_cast<int>(this->_internal_gpu_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "monitor.proto.GpuInfo.gpu_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gpu_name(), target);
  }

  // int32 gpu_mem_total = 2;
  if (this->gpu_mem_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_gpu_mem_total(), target);
  }

  // int32 gpu_mem_free = 3;
  if (this->gpu_mem_free() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_gpu_mem_free(), target);
  }

  // int32 gpu_mem_used = 4;
  if (this->gpu_mem_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_gpu_mem_used(), target);
  }

  // int32 gpu_mem_utilize = 5;
  if (this->gpu_mem_utilize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_gpu_mem_utilize(), target);
  }

  // int32 gpu_utilize = 6;
  if (this->gpu_utilize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_gpu_utilize(), target);
  }

  // int32 temperture = 7;
  if (this->temperture() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_temperture(), target);
  }

  // int32 fan_speed = 8;
  if (this->fan_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_fan_speed(), target);
  }

  // int32 power_stat = 9;
  if (this->power_stat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_power_stat(), target);
  }

  // string id = 10;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "monitor.proto.GpuInfo.id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:monitor.proto.GpuInfo)
  return target;
}

size_t GpuInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:monitor.proto.GpuInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gpu_name = 1;
  if (this->gpu_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gpu_name());
  }

  // string id = 10;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // int32 gpu_mem_total = 2;
  if (this->gpu_mem_total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gpu_mem_total());
  }

  // int32 gpu_mem_free = 3;
  if (this->gpu_mem_free() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gpu_mem_free());
  }

  // int32 gpu_mem_used = 4;
  if (this->gpu_mem_used() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gpu_mem_used());
  }

  // int32 gpu_mem_utilize = 5;
  if (this->gpu_mem_utilize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gpu_mem_utilize());
  }

  // int32 gpu_utilize = 6;
  if (this->gpu_utilize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gpu_utilize());
  }

  // int32 temperture = 7;
  if (this->temperture() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_temperture());
  }

  // int32 fan_speed = 8;
  if (this->fan_speed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fan_speed());
  }

  // int32 power_stat = 9;
  if (this->power_stat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_power_stat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpuInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:monitor.proto.GpuInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GpuInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GpuInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:monitor.proto.GpuInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:monitor.proto.GpuInfo)
    MergeFrom(*source);
  }
}

void GpuInfo::MergeFrom(const GpuInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:monitor.proto.GpuInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gpu_name().size() > 0) {
    _internal_set_gpu_name(from._internal_gpu_name());
  }
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.gpu_mem_total() != 0) {
    _internal_set_gpu_mem_total(from._internal_gpu_mem_total());
  }
  if (from.gpu_mem_free() != 0) {
    _internal_set_gpu_mem_free(from._internal_gpu_mem_free());
  }
  if (from.gpu_mem_used() != 0) {
    _internal_set_gpu_mem_used(from._internal_gpu_mem_used());
  }
  if (from.gpu_mem_utilize() != 0) {
    _internal_set_gpu_mem_utilize(from._internal_gpu_mem_utilize());
  }
  if (from.gpu_utilize() != 0) {
    _internal_set_gpu_utilize(from._internal_gpu_utilize());
  }
  if (from.temperture() != 0) {
    _internal_set_temperture(from._internal_temperture());
  }
  if (from.fan_speed() != 0) {
    _internal_set_fan_speed(from._internal_fan_speed());
  }
  if (from.power_stat() != 0) {
    _internal_set_power_stat(from._internal_power_stat());
  }
}

void GpuInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:monitor.proto.GpuInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpuInfo::CopyFrom(const GpuInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:monitor.proto.GpuInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpuInfo::IsInitialized() const {
  return true;
}

void GpuInfo::InternalSwap(GpuInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  gpu_name_.Swap(&other->gpu_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GpuInfo, power_stat_)
      + sizeof(GpuInfo::power_stat_)
      - PROTOBUF_FIELD_OFFSET(GpuInfo, gpu_mem_total_)>(
          reinterpret_cast<char*>(&gpu_mem_total_),
          reinterpret_cast<char*>(&other->gpu_mem_total_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GpuInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace monitor
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::monitor::proto::GpuInfo* Arena::CreateMaybeMessage< ::monitor::proto::GpuInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::monitor::proto::GpuInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
