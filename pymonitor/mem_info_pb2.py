# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: mem_info.proto
# Protobuf Python Version: 5.29.0
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import runtime_version as _runtime_version
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
_runtime_version.ValidateProtobufRuntimeVersion(
    _runtime_version.Domain.PUBLIC,
    5,
    29,
    0,
    '',
    'mem_info.proto'
)
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x0emem_info.proto\x12\rmonitor.proto\"\x81\x03\n\x07MemInfo\x12\r\n\x05total\x18\x01 \x01(\x02\x12\x0c\n\x04\x66ree\x18\x02 \x01(\x02\x12\r\n\x05\x61vail\x18\x03 \x01(\x02\x12\x0f\n\x07\x62uffers\x18\x04 \x01(\x02\x12\x0e\n\x06\x63\x61\x63hed\x18\x05 \x01(\x02\x12\x13\n\x0bswap_cached\x18\x06 \x01(\x02\x12\x0e\n\x06\x61\x63tive\x18\x07 \x01(\x02\x12\x10\n\x08inactive\x18\x08 \x01(\x02\x12\x13\n\x0b\x61\x63tive_anon\x18\t \x01(\x02\x12\x15\n\rinactive_anon\x18\n \x01(\x02\x12\x13\n\x0b\x61\x63tive_file\x18\x0b \x01(\x02\x12\x15\n\rinactive_file\x18\x0c \x01(\x02\x12\r\n\x05\x64irty\x18\r \x01(\x02\x12\x11\n\twriteback\x18\x0e \x01(\x02\x12\x12\n\nanon_pages\x18\x0f \x01(\x02\x12\x0e\n\x06mapped\x18\x10 \x01(\x02\x12\x14\n\x0ckReclaimable\x18\x11 \x01(\x02\x12\x14\n\x0csReclaimable\x18\x12 \x01(\x02\x12\x12\n\nsUnreclaim\x18\x13 \x01(\x02\x12\x14\n\x0cused_percent\x18\x1f \x01(\x02\x62\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'mem_info_pb2', _globals)
if not _descriptor._USE_C_DESCRIPTORS:
  DESCRIPTOR._loaded_options = None
  _globals['_MEMINFO']._serialized_start=34
  _globals['_MEMINFO']._serialized_end=419
# @@protoc_insertion_point(module_scope)
